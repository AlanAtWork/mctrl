/**
 * @page page_design Design Notes
 *
 * @section sec_error_handling About Error Handling
 *
 * In general, mCtrl follows Win32API conventions in error handling. On error,
 * the mCtrl functions set the error code with @c SetLastError() and then
 * typically return a value indicating an error has occurred. In most cases
 * this error indicator is 0, -1, @c FALSE or @c NULL, depending on the
 * function and type it returns.
 *
 * If a function fails, any output parameters are undefined and you
 * cannot rely on their value.
 *
 * Also note that for the category of caller's programmatic errors (e.g.
 * when application specifies an invalid value in a function parameter or
 * invalid combination of multiple parameters; or when calling any function
 * without having the particular mCtrl module initialized), mCtrl uses very
 * pragmatic approach: Such error conditions are only checked if it is
 * reasonably easy to do so. Some more checks can be enabled in debug builds
 * of mCtrl.
 *
 *
 * @section sec_strings About Strings
 *
 * @c MCTRL.DLL supports Unicode and strings held internally in the library
 * are encoded in Unicode.
 *
 * However on interface level, @c MCTRL.DLL supports both Unicode and ANSI
 * strings as well. If a function, message of a control or a structure
 * uses string, there are usually two flavors of the entity: one for Unicode
 * and one for the ANSI string. When calling a function or sending a message,
 * ANSI strings in parameters and structure members are converted to Unicode
 * on input and Unicode to ANSI on output.
 *
 * Identifiers of the Unicode flavor then have the @c "W" suffix and ANSI have
 * @c "A" suffix, in the same way as Win32API does. The public headers also
 * provide preprocessor macros without the suffix, as an alias for the one
 * of the two depending whether @c UNICODE is defined or not.
 *
 * In case of notifications sent by control to the application, the mCtrl
 * also follows the Windows custom practice: Controls which may need to send
 * a notification with string data send @c WM_NOTIFYFORMAT message to its
 * parent during creation and then respect the parent's desire.
 *
 * This means you may use @c MCTRL.DLL easily in Unicode-enabled application
 * as well as in ANSI applications.
 *
 *
 * @section sec_init About Initialization and Termination
 *
 * mCtrl functionality is divided into several modules, each having its own
 * public header file. Almost every module corresponds to an implementation
 * of one GUI control. With few trivial exceptions, each module has its own
 * initialization and termination function.
 *
 * Before you may use any functionality of the module you have to initialize
 * it and after you stop using it you should terminate it to free any
 * resources the module uses.
 *
 * For controls, the initialization routine typically registers the control's
 * window class with @c RegisterClass(), and the termination function
 * unregisters it with @c UnregisterClass().
 *
 * Note that for performance reasons mCtrl functions do not test whether the
 * module is properly initialized, so the function can fail in any means
 * if the module is not initialized, or can work if the function does not
 * currently rely on the initialization. But note that in the latter case
 * there is no guaranty the behavior does not change in future versions of
 * mCtrl.
 *
 * The initialization function can be always called multiple times (even
 * concurrently for multiple threads). Each module has its own initialization
 * counter, incremented in the initialization function and decremented in
 * the termination function. The module is really uninitialized only after
 * the counter drops back down to zero.
 *
 * @attention Note that if you are using @c MCTRL.DLL from your dynamic
 * library, you may not call the initialization and termination functions
 * in context of @c DllMain(). Windows severly limits what can be done safely
 * in the @c DllMain() context. Even if it would be safe for some modules
 * currently there is no guaranty that future version of mCtrl won't use
 * anything problematic in this regard.
 *
 *
 * @section sec_msg_constants About Message Constants
 *
 * mCtrl makes this promise (valid also for future versions of @c MCTRL.DLL):
 * All mCtrl controls only implement private messages in the range 0x0401
 * (@c WM_USER + 1) to 0x1299 (@c WM_USER + 0x0eff).
 *
 * Beside that mCtrl controls support some common control general messages
 * (@c CCM_xxxx which start at 0x2000; e.g. @c CCM_SETUNICODEFORMAT).
 *
 * I.e., if an application implements some custom control as a subclass of
 * mCtrl control, it should acquire its private message from the range
 * 0x1300 to 0x1fff.
 *
 *
 * @section sec_multithreading About Multi-threading
 *
 * mCtrl is designed to be multi-threading friendly. In general, all functions
 * are reentrant. I.e. you can call the same @c MCTRL.DLL function concurrently
 * from multiple threads.
 *
 * However remember that access to data visible externally through @c MCTRL.DLL
 * interface is not synchronized: If you have such data (e.g. @ref MC_HTABLE)
 * and then want to manipulate with the data concurrently in context of
 * multiple threads, @c MCTRL.DLL does not synchronize for you: It's
 * application developer's responsibility to do so in order to avoid race
 * conditions.
 *
 * Also note that some mCtrl modules may include yet another limitations.
 * Any such limitations are described in documentation of such the particular
 * modules. (The @ref MC_WC_HTML control is a prominent example of such
 * limitation.)
 *
 * Furthermore, some care is also needed if your application is multi-threaded
 * and if it relies on any COM interface in any thread which may call into
 * @c MCTRL.DLL. See @ref sec_com for mroe information about this.
 *
 *
 * @section sec_com Compatibility with COM
 *
 * @note In case you you can not understand what this section is about, and
 * you are sure your application does not use COM, then all you need to know
 * is this: Everything is alright. Skip this section and ignore it. mCtrl will
 * just work.
 *
 * Internally, implementation of some mCtrl features and modules is based on
 * COM (Component Object Model). The COM uses the not so widely understood
 * concept of thread apartments.
 *
 * Each thread which wants to use COM, needs first to initialize the COM
 * subsystem with function @c CoInitialize() or @c CoInitializeEx() or any
 * function wrapping it (e.g. @c OleInitialize()). The function (or a parameter
 * passed to it) then determines the thread's apartment. Once set, the thread
 * apartment then cannot be changed.
 *
 * This design may mean a problem when designing any DLL. The DLL can safely
 * set COM apartment model for worker threads private to the DLL where the
 * application has no chance to initialize it on its own. But in the usual
 * case of an application thread which just calls arbitrary DLL function,
 * calling @c CoInitialize() inside the DLL brings a risk: If both the DLL as
 * well as the application want to use COM and they do not agree on common
 * apartment model, the application will be subject of subtle and hard-to-debug
 * bugs (the thread may live in other apartment then DLL or application thinks,
 * the @c CoInitialize() may fail etc.)
 *
 * This section therefore describes how @c MCTRL.DLL initializes and mananges
 * COM and we recommend two ways how to deal with COM in application linking
 * against @c MCTRL.DLL.
 *
 * Actually, the rules are very simple:
 *
 * -# @c MCTRL.DLL implementation of any module or feature may or may not use
 * COM as it sees fit. Even modules which do not yet do so today, may start to
 * do so in any future version of mCtrl.
 *
 * -# @c MCTRL.DLL uses COM in a way which is compatible both with
 * single-threaded apartments as well as multi-threaded apartments.
 *
 * -# The very 1st time, when @c MCTRL.DLL needs to use COM, it detects whether
 * the calling thread has COM subsystem already initialized or not. The result
 * of this test then determines whether @c MCTRL.DLL does all COM initialization
 * on its own or if it leaves it on the application. I.e. if the test says the
 * COM is (for the current thread) already initialized, it tells @c MCTRL.DLL
 * to never ever attempt to initialize COM anymore, in any thread, for the
 * lifetime of the process (or until @c MCTRL.DLL is unloaded) as @c MCTRL.DLL
 * considers the application to be COM-aware. However if the test detects that
 * COM in the given thread is not yet initialized, the @c MCTRL.DLL assumes
 * he application does not use COM at all, and it shall initialize COM as it
 * sees fit for its own purposes to deal with it.
 *
 * -# When @c MCTRL.DLL manages the COM initialization, application must not
 * rely when it does so, and how it does so (i.e. what apartment @c MCTRL.DLL
 * uses.) In other words, there should be no other COM usage but in @c MCTRL.DLL.
 *
 * Hence, any application which links with @c MCTRL.DLL, should strictly follow
 * one of two use patterns as of COM initialization:
 *
 * -# @c MCTRL.DLL manages COM. Application must never perform COM initialization
 * of any thread which may call into @c MCTRL.DLL. This is perfectly usable for
 * applications which (on their own or through any 3rd party DLL) never use
 * COM.
 *
 * -# The application manages COM. This is required for applications which may
 * use COM directly on their own or through any 3rd party DLL from any thread
 * which also may call any mCtrl function. In this case, the application is
 * responsible to initialize COM for each thread prior calling any mCtrl
 * function in the given thread. The application can initialize COM for
 * single-threaded or multi-threaded apartment as it sees fit. (However note
 * that threads performing user-interface, should not use multi-threaded
 * apartments. But this is, of course, raison d'Ãªtre of single-thread apartment
 * and not limitation of mCtrl.)
 *
 *
 * @section sec_dll_deps DLL Dependencies
 *
 * The policy for mCtrl is to make hard dependencies only on DLLs available on
 * on all supported Windows versions. This includes libraries like
 * @c USER32.DLL, @c COMMCTRL32.DLL or @c GDI32.DLL.
 *
 * However some mCtrl features may depend on additional DLLs, which are loaded
 * in runtime. In such cases, mCtrl tries to behave in a reasonable manner even
 * if those libraries or are not available.
 *
 * - @c UXTHEME.DLL is used on Windows XP and newer to paint the mCtrl controls
 *   using the current theme. Note mCtrl does so only if the application uses
 *   @c COMMCTRL32.DLL version 6 or newer.
 *
 * - In cases when GDI is insufficient as higher-quality graphics with alpha
 *   channel or with anti-aliasing support is needed, mCtrl loads Direct2D
 *   (@c D2D1.DLL) and DirectWrite (@c DWRITE.DLL), or (if not available) GDI+
 *   (@c GDIPLUS.DLL). Note that Direct2D is only available since MS Vista
 *   (with some Service Pack or other updates) and newer Windows versions.
 *   GDI+ is available since Windows 2000 with some Service Packs. To make
 *   @c MCTRL.DLL working on all Windows 2000, even when the system lacks the
 *   library, you may need to deploy the redistributable version of GDI+ v. 1.0
 *   into your application directory, when installing your application. The
 *   redistributable @c GDIPLUS.DLL can be obtained from Microsoft.
 */
